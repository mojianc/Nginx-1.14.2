ngx_module_t  ngx_http_module = {
    NGX_MODULE_V1,
    &ngx_http_module_ctx{
        ngx_string("http"),
        NULL,
        NULL
    },
    ngx_http_commands{
         { 
            ngx_string("http"),
            NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
            ngx_http_block,
            0,
            0,
            NULL 
        },
        ngx_null_command
    },                     /* module directives */
    NGX_CORE_MODULE,                       /* module type */
    NULL,                                  /* init master */
    NULL,                                  /* init module */
    NULL,                                  /* init process */
    NULL,                                  /* init thread */
    NULL,                                  /* exit thread */
    NULL,                                  /* exit process */
    NULL,                                  /* exit master */
    NGX_MODULE_V1_PADDING
};

main
 |--ngx_init_cycle
    |--ngx_core_module->ngx_core_module_ctx->ngx_core_module_create_conf()
    |--ngx_conf_parse()
        |--ngx_conf_handler()
            |--rv = cmd->set(cf, cmd, conf);
                |--ngx_events_module->ngx_events_commands->ngx_events_block()
                    |--ngx_epoll_module->ngx_epoll_module_ctx->ngx_epoll_create_conf()
                    |--ngx_event_core_module->ngx_event_core_module_ctx->ngx_event_core_create_conf
                    |--ngx_conf_parse()
                    |--ngx_event_core_module->ngx_event_core_module_ctx->ngx_event_core_init_conf()
                        |--epoll_create()  根据平台初始化epoll(貌似没有用)
                    |--ngx_epoll_module->ngx_epoll_module_ctx->ngx_epoll_init_conf()
                |--ngx_event_core_module->ngx_event_core_commands->ngx_event_connections()
                |--ngx_epoll_module->ngx_epoll_commands->ngx_conf_set_num_slot()
                |--ngx_http_module->ngx_http_commands->ngx_http_block()
                    |--ngx_http_init_phase_handlers()
                    |--ngx_http_optimize_servers()
                        |--ngx_http_init_listening()
                            |--ngx_http_add_listening()
                                |--ls->handler = ngx_http_init_connection;//侦听套接字 的回调函数。该回调函数在ngx_event_accept函数中回调；回调之后，会将读取事件回调函数rev->handler()修改成方法：ngx_http_wait_request_handler
                                                 |--rev->handler = ngx_http_wait_request_handler;
                                                 |--c->write->handler = ngx_http_empty_handler;


ngx_http_core_main_conf_t{
    //http框架初始化后各个http模块构造的处理方法组成phase_engine
    ngx_http_phase_engine_t    phase_engine{
           //由ngx_http_phase_handler_t结构体构成的数组，每一个数组成员代表着一个http模块所添加的一个处理方法
            ngx_http_phase_handler_t  *handlers{
            //每个handler方法必须对应一个checker方法，这个checker方法由http框架实现
            ngx_http_phase_handler_pt  checker;
            //各个http模块实现的方法
            ngx_http_handler_pt        handler;
            ngx_uint_t                 next;
        }
        ngx_uint_t                 server_rewrite_index;
        ngx_uint_t                 location_rewrite_index;
    }
    //存放该http{}配置块下监听的所有ngx_http_conf_port_t端口
    ngx_array_t               *ports;
    ngx_http_phase_t           phases[NGX_HTTP_LOG_PHASE + 1];
}

========================================================================================================================
http状态机

typedef struct {
    ngx_http_phase_t           phases[NGX_HTTP_LOG_PHASE + 1]; //存储状态机
} ngx_http_core_main_conf_t;


typedef struct {
    ngx_array_t                handlers;
} ngx_http_phase_t;

struct ngx_http_phase_handler_s {
    //每个handler方法必须对应一个checker方法，这个checker方法由http框架实现
    ngx_http_phase_handler_pt  checker;
    //各个http模块实现的方法
    ngx_http_handler_pt        handler;
    ngx_uint_t                 next;
};


ngx_http_core_run_phases()解析：

ngx_http_core_main_conf_t{
    ngx_http_phase_engine_t    phase_engine{
        typedef struct {
            //handlers是由ngx_http_phase_handler_t构成的数组首地址，它表示一个请求可能经历的所有ngx_http_handler_pt处理方法
            ngx_http_phase_handler_t  *handlers;{
                struct ngx_http_phase_handler_s {
                    //每个handler方法必须对应一个checker方法，这个checker方法由http框架实现
                    ngx_http_phase_handler_pt  checker;
                    //各个http模块实现的方法
                    ngx_http_handler_pt        handler;
                    ngx_uint_t                 next;
                };
            }
            //表示NGX_HTTP_SERVER_REWRITE_PHASE阶段的第1个ngx_http_phase_handler_t处理方法在handlers数组中的序号，用于在执行
            //HTTP请求的任何阶段中快速跳转到NGX_HTTP_SERVER_REWRITE_PHASE阶段处理请求
            ngx_uint_t                 server_rewrite_index;
            //表示NGX_HTTP_REWRITE_PHASE阶段第1个ngx_http_phase_handler_t处理方法在handlers数组中的序号，用于在执行http请求
            //的任何阶段中快速跳转到NGX_HTTP_REWRITE_PHASE阶段处理请求
            ngx_uint_t                 location_rewrite_index;
        } ngx_http_phase_engine_t;
    }
}

struct ngx_http_request_s {
    //全局的ngx_http_phase_engine_t结构中定义了一个ngx_http_phase_handler_t回调方法组成的数组，而phase_handler成员与该数组配合使用，表示请求
    //下次应当执行以phase_handler作为序号指定的数组中的回调方法，http框架正式以这种方式把各个http模块集成起来处理请求的
    ngx_int_t                         phase_handler;

}

ngx_http_init_phase_handlers() 初始化状态机
{
    for (i = 0; i < NGX_HTTP_LOG_PHASE; i++) {
        h = cmcf->phases[i].handlers.elts;
        switch (i) {

        /* server中的rewrite*/
        case NGX_HTTP_SERVER_REWRITE_PHASE:
            checker = ngx_http_core_rewrite_phase;

         /* 根据URI查找 location */
        case NGX_HTTP_FIND_CONFIG_PHASE:
            ph->checker = ngx_http_core_find_config_phase;

        /* localtion级别的rewrite */
        case NGX_HTTP_REWRITE_PHASE:
            checker = ngx_http_core_rewrite_phase;

        /* server、location级别的rewrite都是在这个phase进行收尾工作的*/
        case NGX_HTTP_POST_REWRITE_PHASE:
            if (use_rewrite) {
                ph->checker = ngx_http_core_post_rewrite_phase;
            }

        /* 细粒度的access，比如权限验证、存取控制 */
        case NGX_HTTP_ACCESS_PHASE:
            checker = ngx_http_core_access_phase;

        /* 根据上述两个phase得到access code进行操作 */
        case NGX_HTTP_POST_ACCESS_PHASE:
            if (use_access) {
                ph->checker = ngx_http_core_post_access_phase;
            }

         /* 生成http响应 */
        case NGX_HTTP_CONTENT_PHASE:
            checker = ngx_http_core_content_phase;
            
        default:
            checker = ngx_http_core_generic_phase;
        }

        n += cmcf->phases[i].handlers.nelts;

        for (j = cmcf->phases[i].handlers.nelts - 1; j >= 0; j--) {
            ph->checker = checker;
            ph->handler = h[j];
            ph->next = n;
            ph++;
        }
    }
}