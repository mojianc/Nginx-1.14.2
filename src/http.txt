ngx_module_t  ngx_http_module = {
    NGX_MODULE_V1,
    &ngx_http_module_ctx{
        ngx_string("http"),
        NULL,
        NULL
    },
    ngx_http_commands{
         { 
            ngx_string("http"),
            NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
            ngx_http_block,
            0,
            0,
            NULL 
        },
        ngx_null_command
    },                     /* module directives */
    NGX_CORE_MODULE,                       /* module type */
    NULL,                                  /* init master */
    NULL,                                  /* init module */
    NULL,                                  /* init process */
    NULL,                                  /* init thread */
    NULL,                                  /* exit thread */
    NULL,                                  /* exit process */
    NULL,                                  /* exit master */
    NGX_MODULE_V1_PADDING
};

static ngx_command_t  ngx_events_commands[] = {

    { ngx_string("events"),
      NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
      ngx_events_block,
      0,
      0,
      NULL },

      ngx_null_command
};

main
 |--ngx_init_cycle
    |--ngx_core_module->ngx_core_module_ctx->ngx_core_module_create_conf()
    |--ngx_conf_parse()
        |--ngx_conf_handler()
            |--rv = cmd->set(cf, cmd, conf);
                |--ngx_events_module->ngx_events_commands->ngx_events_block()
                    |--ngx_epoll_module->ngx_epoll_module_ctx->ngx_epoll_create_conf()
                    |--ngx_event_core_module->ngx_event_core_module_ctx->ngx_event_core_create_conf
                    |--ngx_conf_parse()
                    |--ngx_event_core_module->ngx_event_core_module_ctx->ngx_event_core_init_conf()
                        |--epoll_create()  根据平台初始化epoll(貌似没有用)
                    |--ngx_epoll_module->ngx_epoll_module_ctx->ngx_epoll_init_conf()
                |--ngx_event_core_module->ngx_event_core_commands->ngx_event_connections()
                |--ngx_epoll_module->ngx_epoll_commands->ngx_conf_set_num_slot()
                |--ngx_http_module->ngx_http_commands->ngx_http_block()
                    |--ngx_http_init_phase_handlers()
                    |--ngx_http_optimize_servers()
                        |--ngx_http_init_listening()
                            |--ngx_http_add_listening()
                                |--ls->handler = ngx_http_init_connection;//侦听套接字 的回调函数。该回调函数在ngx_event_accept函数中回调；回调之后，会将读取事件回调函数rev->handler()修改成方法：ngx_http_wait_request_handler
                                                 |--rev->handler = ngx_http_wait_request_handler;
                                                 |--c->write->handler = ngx_http_empty_handler;


ngx_http_core_main_conf_t{
    //http框架初始化后各个http模块构造的处理方法组成phase_engine
    ngx_http_phase_engine_t    phase_engine{
        //由ngx_http_phase_handler_t结构体构成的数组，每一个数组成员代表着一个http模块所添加的一个处理方法
        ngx_http_phase_handler_t  *handlers{
            //每个handler方法必须对应一个checker方法，这个checker方法由http框架实现
            ngx_http_phase_handler_pt  checker;
            //各个http模块实现的方法
            ngx_http_handler_pt        handler;
            ngx_uint_t                 next;
        }
        ngx_uint_t                 server_rewrite_index;
        ngx_uint_t                 location_rewrite_index;
    }
    //存放该http{}配置块下监听的所有ngx_http_conf_port_t端口
    ngx_array_t               *ports;
    ngx_http_phase_t           phases[NGX_HTTP_LOG_PHASE + 1];
}