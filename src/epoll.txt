ngx_cycle_t
|--conf_ctx
    |--ngx_events_module  (ngx_events_module模块除了对 events 配置项的解析外，没有做其他任何事情。)
        |--ngx_event_core_module
            |--ngx_epoll_module

ngx_modules[i]来源：
./configure 生成ngx_modules.c:
ngx_module_t *ngx_modules[]={
    &ngx_events_module,
    &ngx_event_core_module,
    &ngx_epoll_module,
    &ngx_http_module
}

NGX_CORE_MODULE
   |--ngx_core_module //核心模块之一，nginx启动加载的第一个模块，是nginx的核心模块之一；其主要用来保存不属于{}也不包括{}的全局配置项。
                      //nginx启动时在解析配置之前调用ngx_core_module_create_conf函数创建保存配置项的结构体，配置解析完以后调用ngx_core_module_init_conf函数处理配置文件中没有设置但是属于该模块负责的配置项。
   |--ngx_events_module //核心模块之一，它是其他所有事件模块的代理模块。nginx在启动时只与events模块打交道，而由events模块来加载其他事件模块；这样做的一个好处就是在添加新的事件模块处理新配置项时原有事件模块代码不需要做任何改动。
                        //events模块功能非常简单，它只负责处理events配置项（由ngx_events_block函数处理）。ngx_events_block函数做三件事：（1）为其他事件模块创建存储配置项结构指针的指针数组，并调用其他模块的create_conf函数；
						//(2)调用ngx_conf_parse函数解析events配置项内的配置项；（3）调用其他事件模块的init_conf函数
       NGX_EVENT_MODULE
	   |--ngx_event_core_module //第一个事件类型模块，它的主要功能是负责解析事件类配置项，选择事件处理机制（select，poll，epoll还是kequeue机制），创建连接池，预分配读写事件池等。
	                            //ngx_event_core_commands[] 中指定处理conf配置的关于sevents的配置项
       |--ngx_epoll_module
   |--ngx_http_module  //负责解析http{}中的配置，分配内存空间，并调用子模块create_main_conf(),create_srv_conf(),和create_loc_conf()来解析server{}和location{}中的配置。
       NGX_HTTP_MODULE
       |--ngx_http_core_module //解析http基本配置ngx_http_core_module
       |--ngx_http_access_module
       |--ngx_http_upstream_module
       |--ngx_http_auth_request_module
       |--ngx_http_autoindex_module
       |--ngx_http_browser_module
       |--ngx_http_charset_filter_module
       |--ngx_http_chunked_filter_module
       |--ngx_http_dav_module
       |--ngx_http_degradation_module
       |--ngx_http_empty_gif_module
       |--ngx_http_fastcgi_module
       |--ngx_http_flv_module
       |--ngx_http_geo_module
       |--ngx_http_geoip_module
       |--ngx_http_grpc_module
       |--ngx_http_gunzip_filter_module
       |--ngx_http_gzip_filter_module
       |--ngx_http_gzip_static_module
   |--ngx_stream_module
   |--ngx_google_perftools_module
   |--ngx_mail_module
   |--ngx_openssl_module
   |--ngx_thread_pool_module
   |--ngx_regex_module
   |--ngx_errlog_module


ngx_module_t  ngx_events_module = {
    NGX_MODULE_V1,
    &ngx_events_module_ctx{     //上下文，包含解析的关键字，以及对应的解析函数
        ngx_string("events"),
        NULL,
        ngx_event_init_conf
    }
    ngx_events_commands {       //命令，关键对应的处理函数
        ngx_string("events"),
        NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
        ngx_events_block,
        0,
        0,
        NULL },
        ngx_null_command}，
    NGX_CORE_MODULE,                       /* module type */
    NULL,                                  /* init master */
    NULL,                                  /* init module */
    NULL,                                  /* init process */
    NULL,                                  /* init thread */
    NULL,                                  /* exit thread */
    NULL,                                  /* exit process */
    NULL,                                  /* exit master */
    NGX_MODULE_V1_PADDING
};

ngx_module_t  ngx_event_core_module = {
    NGX_MODULE_V1,
    &ngx_event_core_module_ctx{
        &event_core_name,
        ngx_event_core_create_conf,            /* create configuration */
        ngx_event_core_init_conf,              /* init configuration */
        { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }
    }
    ngx_event_core_commands,               /* module directives */
    NGX_EVENT_MODULE,                      /* module type */
    NULL,                                  /* init master */
    ngx_event_module_init,                 /* init module */
    ngx_event_process_init,                /* init process */
    NULL,                                  /* init thread */
    NULL,                                  /* exit thread */
    NULL,                                  /* exit process */
    NULL,                                  /* exit master */
    NGX_MODULE_V1_PADDING
};

ngx_module_t ngx_epoll_module{
    NGX_MODULE_V1,
    &ngx_epoll_module_ctx{
        &epoll_name,
        ngx_epoll_create_conf,               /* create configuration */
        ngx_epoll_init_conf,                 /* init configuration */
        ngx_event_actions_t{
            ngx_epoll_add_event,             /* add an event */
            ngx_epoll_del_event,             /* delete an event */
            ngx_epoll_add_event,             /* enable an event */
            ngx_epoll_del_event,             /* disable an event */
            ngx_epoll_add_connection,        /* add an connection */
            ngx_epoll_del_connection,        /* delete an connection */
            ngx_epoll_notify,                /* trigger a notify */
            NULL,                            /* trigger a notify */
            ngx_epoll_process_events,        /* process the events */
            ngx_epoll_init,                  /* init the events */
            ngx_epoll_done,                  /* done the events */
        }
    }              
    ngx_epoll_commands，
    NGX_EVENT_MODULE,                    /* module type */
    NULL,                                /* init master */
    NULL,                                /* init module */
    NULL,                                /* init process */
    NULL,                                /* init thread */
    NULL,                                /* exit thread */
    NULL,                                /* exit process */
    NULL,                                /* exit master */
    NGX_MODULE_V1_PADDING
}

main()
|--ngx_master_process_cycle()
   |--ngx_start_worker_processes()
      |--ngx_spawn_process()
         |--pid = fork();
         |-- proc(cycle, data);==ngx_worker_process_cycle()
            |--ngx_worker_process_init()  初始化
                |--cycle->modules[i]->init_process(cycle)
                    |--ngx_event_core_module->ngx_event_process_init()
                        |--module->actions.init(cycle, ngx_timer_resolution
                            |--ngx_epoll_module->ngx_event_actions_t->ngx_epoll_init(); //epoll初始化
                               |--epoll_create() //创建epoll
                        |--ngx_add_event(rev, NGX_READ_EVENT, 0)
                           |--ngx_event_actions.add()
                               |--ngx_epoll_module->ngx_event_actions_t->ngx_epoll_add_event()
                                 |--epoll_ctl() //添加epoll
            |--ngx_process_events_and_timers() //执行
               |--ngx_process_events()==ngx_event_actions.process_events()
                  |--ngx_epoll_module->ngx_epoll_process_events()   //epoll执行
                      |--ngx_epoll_module->ngx_event_actions_t->ngx_epoll_process_events()
                         |--epoll_wait() //等待epoll返回

ngx_init_cycle(ngx_cycle_t *old_cycle)
    |--if (ngx_conf_parse(&conf, &cycle->conf_file) != NGX_CONF_OK) {
        |--rv = (*cf->handler)(cf, NULL, cf->handler_conf);
        |--rc = ngx_conf_handler(cf, rc);
            |--rv = cmd->set(cf, cmd, conf);
                /*执行指令对应的  功能函数！！
                    例如：ngx_events_module->ngx_events_commands->ngx_events_block()
                    ngx_event_core_module->ngx_event_core_commands->ngx_event_connections()
                    ngx_epoll_module->ngx_epoll_commands->ngx_conf_set_num_slot()
                    ngx_http_module->ngx_http_commands->ngx_http_block()
                */